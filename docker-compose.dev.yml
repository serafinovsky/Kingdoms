services:
  kingdoms-traefik:
    image: traefik:v3.3.3
    container_name: kingdoms-traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.external.address=:${EXTERNAL_PORT} # Для внешних запросов
      - --entrypoints.internal.address=:${INTERNAL_PORT} # Для внутрених
      - --api.dashboard=true
      - --log.level=DEBUG
      - --accesslog=true
      - --accesslog.fields.headers.names.Authorization=keep
      - --metrics.prometheus=true
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addServicesLabels=true
    ports:
      - 8080:8080 # Dashboard
      - ${EXTERNAL_PORT}:${EXTERNAL_PORT} # Внешний порт
      - ${INTERNAL_PORT}:${INTERNAL_PORT} # Внутренний порт
    networks:
      - kingdoms-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - kingdoms-auth

  kingdoms-media:
    container_name: kingdoms-media
    image: nginx:stable-alpine3.20
    env_file: ".env"
    networks:
      - kingdoms-network
    volumes:
      - ./services/media/files:/srv/media:ro
      - ./services/media/dockerization/base.nginx.conf:/etc/nginx/nginx.base.conf:ro
      - ./services/media/dockerization/dev.nginx.conf:/etc/nginx/nginx.conf:ro
      - ./services/media/dockerization/dev.conf.template:/etc/nginx/templates/dev.conf.template
    labels:
      - traefik.enable=true
      - traefik.http.routers.media-web.rule=PathPrefix(`/media`)
      - traefik.http.routers.media-web.entrypoints=external
      - traefik.http.routers.media-web.service=media-web
      - traefik.http.services.media-web.loadbalancer.server.port=${MEDIA_PORT}

  kingdoms-pg:
    container_name: kingdoms-pg
    image: postgres:17.4-alpine3.20
    env_file: ".env"
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    expose:
      - ${PG_PORT}
    networks:
      - kingdoms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $AUTH_PG_USER -d $AUTH_PG_NAME"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./services/auth/dockerization/db_init.sh:/docker-entrypoint-initdb.d/auth_db_init.sh:ro

  kingdoms-mongo:
    container_name: kingdoms-mongo
    image: mongo:latest
    env_file: ".env"
    expose:
      - "${MONGO_PORT}"
    networks:
      - kingdoms-network
    volumes:
      - mongodata:/data/db
      - ./services/cabinet/dockerization/initCabinet.js:/docker-entrypoint-initdb.d/cabinet.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  kingdoms-redis:
    container_name: kingdoms-redis
    image: redis:alpine3.20
    expose:
      - ${REDIS_PORT}
    networks:
      - kingdoms-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  kingdoms-auth:
    build:
      context: ./services/auth/
      dockerfile: ./dockerization/dev.Dockerfile
      args:
        USER_ID: ${USER_ID:-1000}
        GROUP_ID: ${GROUP_ID:-1000}
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.auth-middleware.forwardauth.address=http://kingdoms-traefik:${INTERNAL_PORT}/api/v1/auth/token/validate/
      - traefik.http.middlewares.auth-middleware.forwardauth.forwardBody=true
      - traefik.http.middlewares.auth-middleware.forwardauth.authResponseHeaders=X-User-Id

      - traefik.http.middlewares.cors-allow-all.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS,PATCH
      - traefik.http.middlewares.cors-allow-all.headers.accesscontrolalloworiginlist=*
      - traefik.http.middlewares.cors-allow-all.headers.accesscontrolallowheaders=*
      - traefik.http.middlewares.cors-allow-all.headers.accesscontrolallowcredentials=false
      - traefik.http.middlewares.cors-allow-all.headers.accesscontrolmaxage=86400

      - traefik.http.routers.auth-web.rule=PathRegexp(`(?i)^/api/v\d+/auth`)
      - traefik.http.routers.auth-web.entrypoints=external
      - traefik.http.routers.auth-web.middlewares=cors-allow-all
      - traefik.http.routers.auth-web.service=auth-web
      - traefik.http.services.auth-web.loadbalancer.server.port=${AUTH_PORT}

      - traefik.http.routers.users-web.rule=PathRegexp(`(?i)^/api/v\d+/users`)
      - traefik.http.routers.users-web.entrypoints=external
      - traefik.http.routers.users-web.service=users-web
      - traefik.http.routers.users-web.middlewares=auth-middleware,cors-allow-all
      - traefik.http.services.users-web.loadbalancer.server.port=${AUTH_PORT}

      - traefik.http.routers.auth-internal.rule=PathRegexp(`(?i)^/api/v\d+/auth`) || PathRegexp(`(?i)^/api/v\d+/users`)
      - traefik.http.routers.auth-internal.entrypoints=internal
      - traefik.http.routers.auth-internal.service=auth-internal
      - traefik.http.routers.auth-internal.middlewares=cors-allow-all
      - traefik.http.services.auth-internal.loadbalancer.server.port=${AUTH_PORT}
    networks:
      - kingdoms-network
    expose:
      - "${AUTH_PORT}"
    env_file: ".env"
    working_dir: /opt/projects/app
    volumes:
      - "./services/auth/src:/opt/projects/app/"
    command: "uvicorn main:app --reload --host ${AUTH_HOST} --port ${AUTH_PORT}"
    depends_on:
      kingdoms-redis:
        condition: service_healthy
      kingdoms-pg:
        condition: service_healthy

  kingdoms-auth-worker:
    container_name: kingdoms-auth-worker
    build:
      context: ./services/auth/
      dockerfile: ./dockerization/dev.Dockerfile
      args:
        USER_ID: ${USER_ID:-1000}
        GROUP_ID: ${GROUP_ID:-1000}
    env_file: ".env"
    working_dir: /opt/projects/app
    user: "${USER_ID}:${GROUP_ID}"
    volumes:
      - ./services/auth/src:/opt/projects/app/
      - ./services/media/files:${AUTH_MEDIA_ROOT}
    command: "taskiq worker tasks:broker"
    depends_on:
      kingdoms-redis:
        condition: service_healthy
      kingdoms-pg:
        condition: service_healthy
    networks:
      - kingdoms-network

  kingdoms-cabinet:
    build:
      context: ./services/cabinet/
      dockerfile: ./dockerization/dev.Dockerfile
      args:
        USER_ID: ${USER_ID:-1000}
        GROUP_ID: ${GROUP_ID:-1000}
    expose:
      - "${CABINET_PORT}"
    labels:
      - traefik.enable=true
      - traefik.http.routers.cabinet-web.rule=PathRegexp(`(?i)^/api/v\d+/cabinet`)
      - traefik.http.routers.cabinet-web.entrypoints=external
      - traefik.http.routers.cabinet-web.middlewares=auth-middleware
      - traefik.http.routers.cabinet-web.service=cabinet-web
      - traefik.http.services.cabinet-web.loadbalancer.server.port=${CABINET_PORT}

      - traefik.http.routers.cabinet-internal.rule=PathRegexp(`(?i)^/api/v\d+/cabinet`)
      - traefik.http.routers.cabinet-internal.entrypoints=internal
      - traefik.http.routers.cabinet-internal.service=cabinet-internal
      - traefik.http.services.cabinet-internal.loadbalancer.server.port=${CABINET_PORT}
    networks:
      - kingdoms-network
    env_file: ".env"
    working_dir: /opt/projects/app
    volumes:
      - "./services/cabinet/src:/opt/projects/app/"
    command: "uvicorn main:app --reload --host ${CABINET_HOST} --port ${CABINET_PORT} --log-level debug"
    depends_on:
      kingdoms-redis:
        condition: service_healthy

  kingdoms-rooms:
    build:
      context: ./services/rooms/
      dockerfile: ./dockerization/dev.Dockerfile
      args:
        USER_ID: ${USER_ID:-1000}
        GROUP_ID: ${GROUP_ID:-1000}
    expose:
      - "${ROOMS_PORT}"
    labels:
      - traefik.enable=true
      - traefik.http.routers.rooms-ws.rule=PathPrefix(`/ws/rooms/`)
      - traefik.http.routers.rooms-ws.entrypoints=external
      - traefik.http.routers.rooms-ws.service=rooms-ws
      - traefik.http.services.rooms-ws.loadbalancer.server.port=${ROOMS_PORT}

      - traefik.http.routers.rooms-web.rule=PathRegexp(`(?i)^/api/v\d+/rooms`)
      - traefik.http.routers.rooms-web.entrypoints=external
      - traefik.http.routers.rooms-web.service=rooms-web
      - traefik.http.routers.rooms-web.middlewares=auth-middleware
      - traefik.http.services.rooms-web.loadbalancer.server.port=${ROOMS_PORT}

      - traefik.http.routers.rooms-internal.rule=PathRegexp(`(?i)^/api/v\d+/rooms`)
      - traefik.http.routers.rooms-internal.entrypoints=internal
      - traefik.http.routers.rooms-internal.service=rooms-internal
      - traefik.http.services.rooms-internal.loadbalancer.server.port=${ROOMS_PORT}
    networks:
      - kingdoms-network
    env_file: ".env"
    working_dir: /opt/projects/app
    volumes:
      - "./services/rooms/src:/opt/projects/app/"
    command: "uvicorn main:app --reload --host ${ROOMS_HOST} --port ${ROOMS_PORT} --log-level debug"
    depends_on:
      kingdoms-mongo:
        condition: service_healthy

  kingdoms-front:
    container_name: kingdoms-front
    build:
      context: ./services/front/
      dockerfile: ./dockerization/Dockerfile
    expose:
      - "${FRONT_PORT}"
    labels:
      - traefik.enable=true
      - traefik.http.routers.front-web.rule=PathPrefix(`/`)
      - traefik.http.routers.front-web.entrypoints=external
      - traefik.http.services.front-web.loadbalancer.server.port=${FRONT_PORT}
    networks:
      - kingdoms-network
    env_file: ".env"
    environment:
      - CHOKIDAR_USEPOLLING=true
    user: "node"
    working_dir: /opt/projects/front/
    volumes:
      - "./services/front/:/opt/projects/front/"
    command: "npm run dev -- --host --port ${FRONT_PORT}"
    depends_on:
      - kingdoms-auth

volumes:
  pgdata:
  mongodata:

networks:
  kingdoms-network:
    name: kingdoms-network
